local embed = {}
embed._namespace = nil
embed._fileName = nil
embed._headerFile = nil
embed._cppFile = nil
embed._indentString = "\t"
embed._indentLevel = 0
embed._customDirectives = {}
embed._currentFile = nil

local function readFileContent(inputPath)
  local inputFile = io.open(inputPath, "rb")
  local content = inputFile:read("*a")
  inputFile:close()
  return content
end

local function write(text)
  embed._currentFile:write(text)
end

local function writeIndent()
  write(embed._indentString:rep(embed._indentLevel))
end

local function newLine(count)
  count = count or 1
  write(("\n"):rep(count))
end

local function writeLine(text)
  writeIndent()
  write(text)
  newLine()
end

local function push(text)
  writeLine(text)
  embed._indentLevel = embed._indentLevel + 1
end

local function pop(text)
  embed._indentLevel = embed._indentLevel - 1
  writeLine(text)
end

local function writeCArray(identifier, content)
  push("const uint8_t "..identifier.."[] {")
  for j = 1, #content do
    if j % 16 == 1 then
      writeIndent()
    else
      write(" ")
    end
    write(string.format("0x%02X,", string.byte(content, j)))
    if j % 16 == 0 then
      newLine()
    end
  end
  newLine()
  pop("};")
end

local function startHeaderFile()
  embed._currentFile = embed._headerFile
  writeLine("// This file is generated by a script. Do not modify it manually.")
  writeLine("#pragma once")
  writeLine("#include <cstdint>")
  newLine()
  if #embed._customDirectives > 0 then
    for _, directive in ipairs(embed._customDirectives) do
      writeLine(directive)
    end
    newLine()
  end
  writeLine("namespace "..embed._namespace.." {")
  newLine()
  embed._currentFile = nil
end

local function finishHeaderFile()
  embed._currentFile = embed._headerFile
  newLine()
  writeLine("}")
  embed._currentFile = nil
end

local function startCppFile()
  embed._currentFile = embed._cppFile
  writeLine("// This file is generated by a script. Do not modify it manually.")
  writeLine("#include \""..embed._fileName..".h\"")
  embed._currentFile = nil
end

local function finishCppFile()
  embed._currentFile = embed._cppFile
  embed._currentFile = nil
end



function embed.setIndentString(indentString)
  embed._indentString = indentString
end

function embed.addDirective(directive)
  table.insert(embed._customDirectives, directive)
end

function embed.addFile(inputPath)
  local inputName = path.getname(inputPath)
  local identifier = inputName:gsub("[^%w]", "_")
  local content = readFileContent(inputPath)
  embed._currentFile = embed._headerFile
  writeLine("extern const size_t "..identifier.."_size;")
  writeLine("extern const uint8_t "..identifier.."[];")
  embed._currentFile = embed._cppFile
  newLine()
  writeLine("const size_t "..embed._namespace.."::"..identifier.."_size = "..#content..";")
  writeCArray(embed._namespace.."::"..identifier, content)
  embed._currentFile = nil
  return identifier
end

function embed.addCustom(type, identifier, value)
  local isValueMultiline = value:find("\n") ~= nil
  embed._currentFile = embed._headerFile
  writeLine("extern const "..type.." "..identifier..";")
  embed._currentFile = embed._cppFile
  writeLine("const "..type.." "..embed._namespace.."::"..identifier.." = "..value..";")
  if isValueMultiline then
    newLine()
  end
  embed._currentFile = nil
end

function embed.start(outputDir, fileName, namespace)
  embed._fileName = fileName or "Embeds"
  embed._namespace = namespace or "Embeds"
  embed._headerFile = io.open(path.join(outputDir, embed._fileName..".h"), "w")
  embed._cppFile = io.open(path.join(outputDir, embed._fileName..".cpp"), "w")
  startHeaderFile()
  startCppFile()
  print("Embedding files to "..path.join(outputDir, fileName)..".h/.cpp")
end

function embed.finish()
  finishHeaderFile()
  finishCppFile()
  embed._customDirectives = {}
  embed._headerFile:close()
  embed._headerFile = nil
  embed._cppFile:close()
  embed._cppFile = nil
end

return embed
