local embed = {}
embed._namespace = "Embeds"
embed._fileName = "Embeds"
embed._indentString = "\t"
embed._indentLevel = 0
embed._currentFile = nil

local function readFileContent(inputPath)
  local inputFile = io.open(inputPath, "rb")
  local content = inputFile:read("*a")
  inputFile:close()
  return content
end

local function write(text)
  embed._currentFile:write(text)
end

local function writeIndent()
  write(embed._indentString:rep(embed._indentLevel))
end

local function newLine(count)
  count = count or 1
  write(("\n"):rep(count))
end

local function writeLine(text)
  writeIndent()
  write(text)
  newLine()
end

local function push(text)
  writeLine(text)
  embed._indentLevel = embed._indentLevel + 1
end

local function pop(text)
  embed._indentLevel = embed._indentLevel - 1
  writeLine(text)
end

local function writeCArray(identifier, content)
  push("const uint8_t "..identifier.."[] {")
  for j = 1, #content do
    if j % 16 == 1 then
      writeIndent()
    else
      write(" ")
    end
    write(string.format("0x%02X,", string.byte(content, j)))
    if j % 16 == 0 then
      newLine()
    end
  end
  newLine()
  pop("};")
end

local function createHeaderFile(headerPath, inputPaths)
  embed._currentFile = io.open(headerPath, "w")
  writeLine("// This file is generated by a script. Do not modify it manually.")
  writeLine("#pragma once")
  writeLine("#include <cstdint>")
  newLine()
  writeLine("namespace "..embed._namespace.." {")
  newLine()
  for i, inputPath in ipairs(inputPaths) do
    local inputName = path.getname(inputPath)
    local identifier = inputName:gsub("[^%w]", "_")
    local fileSize = math.tointeger(os.stat(inputPath).size)
    writeLine("extern const uint8_t "..identifier.."["..fileSize.."];")
  end
  newLine()
  writeLine("}")
  embed._currentFile:close()
end

local function createCppFile(cppPath, inputPaths)
  embed._currentFile = io.open(cppPath, "w")
  writeLine("// This file is generated by a script. Do not modify it manually.")
  writeLine("#include \""..embed._fileName..".h\"")
  for i, inputPath in ipairs(inputPaths) do
    local inputName = path.getname(inputPath)
    local identifier = inputName:gsub("[^%w]", "_")
    local content = readFileContent(inputPath)
    newLine()
    writeCArray(embed._namespace.."::"..identifier, content)
  end
  embed._currentFile:close()
end



function embed.setNamespace(namespace)
  embed._namespace = namespace
end

function embed.setIndentString(indentString)
  embed._indentString = indentString
end

function embed.setFileName(fileName)
  embed._fileName = fileName
end

function embed.file(outputDir, inputPath)
  local inputName = path.getname(inputPath)
  local headerPath = path.join(outputDir, inputName..".h")
  local cppPath = path.join(outputDir, inputName..".cpp")
  createHeaderFile(headerPath, {inputPath})
  createCppFile(cppPath, {inputPath})
  print("Embedded file: "..inputPath.." -> "..headerPath)
end

function embed.files(outputDir, inputPaths)
  local headerPath = path.join(outputDir, embed._fileName..".h")
  local cppPath = path.join(outputDir, embed._fileName..".cpp")
  createHeaderFile(headerPath, inputPaths)
  createCppFile(cppPath, inputPaths)
  print("Embedded files: ["..table.concat(inputPaths, ", ").."] -> ["..headerPath..", "..cppPath.."]")
end

return embed
